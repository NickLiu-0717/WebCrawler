// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    NOW() + INTERVAL '7 days',
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`// #nosec G101 -- false positive

type CreateRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteAllRefreshTokens = `-- name: DeleteAllRefreshTokens :exec
DELETE FROM refresh_tokens
`// #nosec G101 -- false positive

func (q *Queries) DeleteAllRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRefreshTokens)
	return err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
Select user_id from refresh_tokens
where (token = $1) and (expires_at > NOW()) and (revoked_at is NULL)
`// #nosec G101 -- false positive

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
Update refresh_tokens
set updated_at = NOW(), revoked_at = NOW()
where token = $1
`// #nosec G101 -- false positive

func (q *Queries) UpdateRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, token)
	return err
}
